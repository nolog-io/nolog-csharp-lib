// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: write/write_request.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace io.nolog.net.api.writespec {

  /// <summary>Holder for reflection information generated from write/write_request.proto</summary>
  public static partial class WriteRequestReflection {

    #region Descriptor
    /// <summary>File descriptor for write/write_request.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WriteRequestReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chl3cml0ZS93cml0ZV9yZXF1ZXN0LnByb3RvEgV3cml0ZSJYChlTZXJ2aWNl",
            "SW5zdGFuY2VJZGVudGlmaWVyEhIKCnNlcnZpY2VfaWQYASABKAkSEwoLaW5z",
            "dGFuY2VfaWQYAiABKAkSEgoKdmVyc2lvbl9pZBgDIAEoCSJ5ChBBbGVydElu",
            "Zm9ybWF0aW9uEhIKCmNvcmVfYWxlcnQYBSABKAkSFwoPc2FtcGxlZF9jb250",
            "ZW50GAEgAygJEhMKC3RvdGFsX2NvdW50GAIgASgDEhEKCXRpbWVzdGFtcBgD",
            "IAEoAxIQCghhbGVydF9pZBgEIAEoAyImCglUaW1lc3RhbXASGQoRdXRjX2Ny",
            "ZWF0aW9uX3RpbWUYASABKAMiwwYKDFdyaXRlUmVxdWVzdBItCgNpZHMYASAB",
            "KAsyIC53cml0ZS5TZXJ2aWNlSW5zdGFuY2VJZGVudGlmaWVyEiwKEmNyZWF0",
            "aW9uX3RpbWVzdGFtcBgCIAEoCzIQLndyaXRlLlRpbWVzdGFtcBIxCgpzaGFy",
            "ZF9pbmZvGAMgASgLMh0ud3JpdGUuV3JpdGVSZXF1ZXN0LlNoYXJkSW5mbxI7",
            "Cg9yYXdfaW5mb3JtYXRpb24YBCABKAsyIi53cml0ZS5Xcml0ZVJlcXVlc3Qu",
            "UmF3SW5mb3JtYXRpb24aIAoJU2hhcmRJbmZvEhMKC3NoYXJkX3Rva2VuGAEg",
            "ASgJGsMECg5SYXdJbmZvcm1hdGlvbhJACgZibG9ja3MYASADKAsyMC53cml0",
            "ZS5Xcml0ZVJlcXVlc3QuUmF3SW5mb3JtYXRpb24uQ3JpdGljYWxCbG9jaxo5",
            "CgZDb3VudHMSDgoGZmlsbGVkGAEgASgIEg8KB3N1Y2Nlc3MYAiABKAUSDgoG",
            "ZmFpbGVkGAMgASgFGrMDCg1Dcml0aWNhbEJsb2NrEgwKBG5hbWUYASABKAkS",
            "WgoQYmxvY2tfZGVwZW5kZW5jeRgCIAMoCzJALndyaXRlLldyaXRlUmVxdWVz",
            "dC5SYXdJbmZvcm1hdGlvbi5Dcml0aWNhbEJsb2NrLkJsb2NrRGVwZW5kZW5j",
            "eRIbCgVzdGF0ZRgDIAEoDjIMLndyaXRlLlN0YXRlEjkKBmNvdW50cxgEIAEo",
            "CzIpLndyaXRlLldyaXRlUmVxdWVzdC5SYXdJbmZvcm1hdGlvbi5Db3VudHMS",
            "JwoGYWxlcnRzGAUgAygLMhcud3JpdGUuQWxlcnRJbmZvcm1hdGlvbhq2AQoP",
            "QmxvY2tEZXBlbmRlbmN5EhIKCmRlcGVuZGVuY3kYASABKAkSDgoGYWN0aW9u",
            "GAIgASgJEhsKBXN0YXRlGAMgASgOMgwud3JpdGUuU3RhdGUSOQoGY291bnRz",
            "GAQgASgLMikud3JpdGUuV3JpdGVSZXF1ZXN0LlJhd0luZm9ybWF0aW9uLkNv",
            "dW50cxInCgZhbGVydHMYBSADKAsyFy53cml0ZS5BbGVydEluZm9ybWF0aW9u",
            "IlMKEVdyaXRlVGhyb3VnaEJsb2NrEhEKCWNsaWVudF9pZBgBIAEoCRIrCg53",
            "cml0ZV9yZXF1ZXN0cxgDIAMoCzITLndyaXRlLldyaXRlUmVxdWVzdCKvAgoR",
            "V3JpdGVSZXNwb25zZUNvZGUSOAoLc3RhdHVzX2NvZGUYASABKA4yIy53cml0",
            "ZS5Xcml0ZVJlc3BvbnNlQ29kZS5TdGF0dXNDb2RlIt8BCgpTdGF0dXNDb2Rl",
            "EgsKB1NVQ0NFU1MQABIiCh5GQUlMVVJFX0FQSUtFWV9DQU5OT1RfVU5CQVNF",
            "NjQQARIjCh9GQUlMVVJFX0FQSUtFWV9DQU5OT1RfVU5NQVJTSEFMEAISIQod",
            "RkFJTFVSRV9BUElLRVlfQ0FOTk9UX0RFQ1JZUFQQAxIaChZGQUlMVVJFX0FQ",
            "SUtFWV9FWFBJUkVEEAQSIAocRkFJTFVSRV9BUElLRVlfTUlTU0lOR19GSUVM",
            "RBAFEhoKFkZBSUxVUkVfQVBJS0VZX0lOVkFMSUQQBiLIAQoNV3JpdGVSZXNw",
            "b25zZRIMCgJvaxgBIAEoCEgAEjgKDHVwZGF0ZV9zaGFyZBgCIAEoCzIgLndy",
            "aXRlLldyaXRlUmVzcG9uc2UuU2hhcmRVcGRhdGVIABIuCgx3cml0ZV9zdGF0",
            "dXMYAyABKAsyGC53cml0ZS5Xcml0ZVJlc3BvbnNlQ29kZRoxCgtTaGFyZFVw",
            "ZGF0ZRINCgVzaGFyZBgBIAEoCRITCgtzaGFyZF90b2tlbhgCIAEoCUIMCgpz",
            "aGFyZHN0YXRlKnkKBVN0YXRlEhEKDVNUQVRFX1VOS05PV04QABIQCgxTVEFU",
            "RV9BTExfT0sQFBIRCg1TVEFURV9OT19EQVRBEB4SGgoWU1RBVEVfQ1JJVElD",
            "QUxfRkFJTFVSRRAoEhwKGFNUQVRFX0RFUEVOREVOQ1lfRkFJTFVSRRAyQlUK",
            "GmlvLm5vbG9nLm5ldC5hcGkud3JpdGVzcGVjWhppby9ub2xvZy9uZXQvYXBp",
            "L3dyaXRlc3BlY6oCGmlvLm5vbG9nLm5ldC5hcGkud3JpdGVzcGVjYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::io.nolog.net.api.writespec.State), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.ServiceInstanceIdentifier), global::io.nolog.net.api.writespec.ServiceInstanceIdentifier.Parser, new[]{ "ServiceId", "InstanceId", "VersionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.AlertInformation), global::io.nolog.net.api.writespec.AlertInformation.Parser, new[]{ "CoreAlert", "SampledContent", "TotalCount", "Timestamp", "AlertId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.Timestamp), global::io.nolog.net.api.writespec.Timestamp.Parser, new[]{ "UtcCreationTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteRequest), global::io.nolog.net.api.writespec.WriteRequest.Parser, new[]{ "Ids", "CreationTimestamp", "ShardInfo", "RawInformation" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo), global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo.Parser, new[]{ "ShardToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation), global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Parser, new[]{ "Blocks" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts), global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts.Parser, new[]{ "Filled", "Success", "Failed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock), global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Parser, new[]{ "Name", "BlockDependency", "State", "Counts", "Alerts" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency), global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency.Parser, new[]{ "Dependency", "Action", "State", "Counts", "Alerts" }, null, null, null, null)})})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteThroughBlock), global::io.nolog.net.api.writespec.WriteThroughBlock.Parser, new[]{ "ClientId", "WriteRequests" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteResponseCode), global::io.nolog.net.api.writespec.WriteResponseCode.Parser, new[]{ "StatusCode" }, null, new[]{ typeof(global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteResponse), global::io.nolog.net.api.writespec.WriteResponse.Parser, new[]{ "Ok", "UpdateShard", "WriteStatus" }, new[]{ "Shardstate" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate), global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate.Parser, new[]{ "Shard", "ShardToken" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum State {
    [pbr::OriginalName("STATE_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("STATE_ALL_OK")] AllOk = 20,
    [pbr::OriginalName("STATE_NO_DATA")] NoData = 30,
    [pbr::OriginalName("STATE_CRITICAL_FAILURE")] CriticalFailure = 40,
    [pbr::OriginalName("STATE_DEPENDENCY_FAILURE")] DependencyFailure = 50,
  }

  #endregion

  #region Messages
  public sealed partial class ServiceInstanceIdentifier : pb::IMessage<ServiceInstanceIdentifier>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServiceInstanceIdentifier> _parser = new pb::MessageParser<ServiceInstanceIdentifier>(() => new ServiceInstanceIdentifier());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceInstanceIdentifier> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInstanceIdentifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInstanceIdentifier(ServiceInstanceIdentifier other) : this() {
      serviceId_ = other.serviceId_;
      instanceId_ = other.instanceId_;
      versionId_ = other.versionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceInstanceIdentifier Clone() {
      return new ServiceInstanceIdentifier(this);
    }

    /// <summary>Field number for the "service_id" field.</summary>
    public const int ServiceIdFieldNumber = 1;
    private string serviceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceId {
      get { return serviceId_; }
      set {
        serviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instance_id" field.</summary>
    public const int InstanceIdFieldNumber = 2;
    private string instanceId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceId {
      get { return instanceId_; }
      set {
        instanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version_id" field.</summary>
    public const int VersionIdFieldNumber = 3;
    private string versionId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VersionId {
      get { return versionId_; }
      set {
        versionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceInstanceIdentifier);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceInstanceIdentifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceId != other.ServiceId) return false;
      if (InstanceId != other.InstanceId) return false;
      if (VersionId != other.VersionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceId.Length != 0) hash ^= ServiceId.GetHashCode();
      if (InstanceId.Length != 0) hash ^= InstanceId.GetHashCode();
      if (VersionId.Length != 0) hash ^= VersionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceId);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstanceId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VersionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceId);
      }
      if (InstanceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(InstanceId);
      }
      if (VersionId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VersionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceId);
      }
      if (InstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceId);
      }
      if (VersionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VersionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceInstanceIdentifier other) {
      if (other == null) {
        return;
      }
      if (other.ServiceId.Length != 0) {
        ServiceId = other.ServiceId;
      }
      if (other.InstanceId.Length != 0) {
        InstanceId = other.InstanceId;
      }
      if (other.VersionId.Length != 0) {
        VersionId = other.VersionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceId = input.ReadString();
            break;
          }
          case 18: {
            InstanceId = input.ReadString();
            break;
          }
          case 26: {
            VersionId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceId = input.ReadString();
            break;
          }
          case 18: {
            InstanceId = input.ReadString();
            break;
          }
          case 26: {
            VersionId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AlertInformation : pb::IMessage<AlertInformation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AlertInformation> _parser = new pb::MessageParser<AlertInformation>(() => new AlertInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AlertInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertInformation(AlertInformation other) : this() {
      coreAlert_ = other.coreAlert_;
      sampledContent_ = other.sampledContent_.Clone();
      totalCount_ = other.totalCount_;
      timestamp_ = other.timestamp_;
      alertId_ = other.alertId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AlertInformation Clone() {
      return new AlertInformation(this);
    }

    /// <summary>Field number for the "core_alert" field.</summary>
    public const int CoreAlertFieldNumber = 5;
    private string coreAlert_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CoreAlert {
      get { return coreAlert_; }
      set {
        coreAlert_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sampled_content" field.</summary>
    public const int SampledContentFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_sampledContent_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> sampledContent_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SampledContent {
      get { return sampledContent_; }
    }

    /// <summary>Field number for the "total_count" field.</summary>
    public const int TotalCountFieldNumber = 2;
    private long totalCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "alert_id" field.</summary>
    public const int AlertIdFieldNumber = 4;
    private long alertId_;
    /// <summary>
    /// Backend only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AlertId {
      get { return alertId_; }
      set {
        alertId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AlertInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AlertInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CoreAlert != other.CoreAlert) return false;
      if(!sampledContent_.Equals(other.sampledContent_)) return false;
      if (TotalCount != other.TotalCount) return false;
      if (Timestamp != other.Timestamp) return false;
      if (AlertId != other.AlertId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CoreAlert.Length != 0) hash ^= CoreAlert.GetHashCode();
      hash ^= sampledContent_.GetHashCode();
      if (TotalCount != 0L) hash ^= TotalCount.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (AlertId != 0L) hash ^= AlertId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      sampledContent_.WriteTo(output, _repeated_sampledContent_codec);
      if (TotalCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalCount);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (AlertId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AlertId);
      }
      if (CoreAlert.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CoreAlert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      sampledContent_.WriteTo(ref output, _repeated_sampledContent_codec);
      if (TotalCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalCount);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
      if (AlertId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(AlertId);
      }
      if (CoreAlert.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CoreAlert);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CoreAlert.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CoreAlert);
      }
      size += sampledContent_.CalculateSize(_repeated_sampledContent_codec);
      if (TotalCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (AlertId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AlertId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AlertInformation other) {
      if (other == null) {
        return;
      }
      if (other.CoreAlert.Length != 0) {
        CoreAlert = other.CoreAlert;
      }
      sampledContent_.Add(other.sampledContent_);
      if (other.TotalCount != 0L) {
        TotalCount = other.TotalCount;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.AlertId != 0L) {
        AlertId = other.AlertId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sampledContent_.AddEntriesFrom(input, _repeated_sampledContent_codec);
            break;
          }
          case 16: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            AlertId = input.ReadInt64();
            break;
          }
          case 42: {
            CoreAlert = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            sampledContent_.AddEntriesFrom(ref input, _repeated_sampledContent_codec);
            break;
          }
          case 16: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 32: {
            AlertId = input.ReadInt64();
            break;
          }
          case 42: {
            CoreAlert = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Timestamp : pb::IMessage<Timestamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Timestamp> _parser = new pb::MessageParser<Timestamp>(() => new Timestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Timestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp(Timestamp other) : this() {
      utcCreationTime_ = other.utcCreationTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Timestamp Clone() {
      return new Timestamp(this);
    }

    /// <summary>Field number for the "utc_creation_time" field.</summary>
    public const int UtcCreationTimeFieldNumber = 1;
    private long utcCreationTime_;
    /// <summary>
    /// Timestamp in seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UtcCreationTime {
      get { return utcCreationTime_; }
      set {
        utcCreationTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Timestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Timestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UtcCreationTime != other.UtcCreationTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UtcCreationTime != 0L) hash ^= UtcCreationTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (UtcCreationTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UtcCreationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (UtcCreationTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UtcCreationTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UtcCreationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UtcCreationTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Timestamp other) {
      if (other == null) {
        return;
      }
      if (other.UtcCreationTime != 0L) {
        UtcCreationTime = other.UtcCreationTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UtcCreationTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            UtcCreationTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A write request is from a specific instance of a specific service and needs
  /// to be aggregated later by the backend.
  /// </summary>
  public sealed partial class WriteRequest : pb::IMessage<WriteRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteRequest> _parser = new pb::MessageParser<WriteRequest>(() => new WriteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest(WriteRequest other) : this() {
      ids_ = other.ids_ != null ? other.ids_.Clone() : null;
      creationTimestamp_ = other.creationTimestamp_ != null ? other.creationTimestamp_.Clone() : null;
      shardInfo_ = other.shardInfo_ != null ? other.shardInfo_.Clone() : null;
      rawInformation_ = other.rawInformation_ != null ? other.rawInformation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteRequest Clone() {
      return new WriteRequest(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private global::io.nolog.net.api.writespec.ServiceInstanceIdentifier ids_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.ServiceInstanceIdentifier Ids {
      get { return ids_; }
      set {
        ids_ = value;
      }
    }

    /// <summary>Field number for the "creation_timestamp" field.</summary>
    public const int CreationTimestampFieldNumber = 2;
    private global::io.nolog.net.api.writespec.Timestamp creationTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.Timestamp CreationTimestamp {
      get { return creationTimestamp_; }
      set {
        creationTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "shard_info" field.</summary>
    public const int ShardInfoFieldNumber = 3;
    private global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo shardInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo ShardInfo {
      get { return shardInfo_; }
      set {
        shardInfo_ = value;
      }
    }

    /// <summary>Field number for the "raw_information" field.</summary>
    public const int RawInformationFieldNumber = 4;
    private global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation rawInformation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation RawInformation {
      get { return rawInformation_; }
      set {
        rawInformation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Ids, other.Ids)) return false;
      if (!object.Equals(CreationTimestamp, other.CreationTimestamp)) return false;
      if (!object.Equals(ShardInfo, other.ShardInfo)) return false;
      if (!object.Equals(RawInformation, other.RawInformation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ids_ != null) hash ^= Ids.GetHashCode();
      if (creationTimestamp_ != null) hash ^= CreationTimestamp.GetHashCode();
      if (shardInfo_ != null) hash ^= ShardInfo.GetHashCode();
      if (rawInformation_ != null) hash ^= RawInformation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ids_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ids);
      }
      if (creationTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreationTimestamp);
      }
      if (shardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ShardInfo);
      }
      if (rawInformation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RawInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ids_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Ids);
      }
      if (creationTimestamp_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreationTimestamp);
      }
      if (shardInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ShardInfo);
      }
      if (rawInformation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RawInformation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ids_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ids);
      }
      if (creationTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreationTimestamp);
      }
      if (shardInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShardInfo);
      }
      if (rawInformation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RawInformation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteRequest other) {
      if (other == null) {
        return;
      }
      if (other.ids_ != null) {
        if (ids_ == null) {
          Ids = new global::io.nolog.net.api.writespec.ServiceInstanceIdentifier();
        }
        Ids.MergeFrom(other.Ids);
      }
      if (other.creationTimestamp_ != null) {
        if (creationTimestamp_ == null) {
          CreationTimestamp = new global::io.nolog.net.api.writespec.Timestamp();
        }
        CreationTimestamp.MergeFrom(other.CreationTimestamp);
      }
      if (other.shardInfo_ != null) {
        if (shardInfo_ == null) {
          ShardInfo = new global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo();
        }
        ShardInfo.MergeFrom(other.ShardInfo);
      }
      if (other.rawInformation_ != null) {
        if (rawInformation_ == null) {
          RawInformation = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation();
        }
        RawInformation.MergeFrom(other.RawInformation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (ids_ == null) {
              Ids = new global::io.nolog.net.api.writespec.ServiceInstanceIdentifier();
            }
            input.ReadMessage(Ids);
            break;
          }
          case 18: {
            if (creationTimestamp_ == null) {
              CreationTimestamp = new global::io.nolog.net.api.writespec.Timestamp();
            }
            input.ReadMessage(CreationTimestamp);
            break;
          }
          case 26: {
            if (shardInfo_ == null) {
              ShardInfo = new global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo();
            }
            input.ReadMessage(ShardInfo);
            break;
          }
          case 34: {
            if (rawInformation_ == null) {
              RawInformation = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation();
            }
            input.ReadMessage(RawInformation);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (ids_ == null) {
              Ids = new global::io.nolog.net.api.writespec.ServiceInstanceIdentifier();
            }
            input.ReadMessage(Ids);
            break;
          }
          case 18: {
            if (creationTimestamp_ == null) {
              CreationTimestamp = new global::io.nolog.net.api.writespec.Timestamp();
            }
            input.ReadMessage(CreationTimestamp);
            break;
          }
          case 26: {
            if (shardInfo_ == null) {
              ShardInfo = new global::io.nolog.net.api.writespec.WriteRequest.Types.ShardInfo();
            }
            input.ReadMessage(ShardInfo);
            break;
          }
          case 34: {
            if (rawInformation_ == null) {
              RawInformation = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation();
            }
            input.ReadMessage(RawInformation);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ShardInfo : pb::IMessage<ShardInfo>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ShardInfo> _parser = new pb::MessageParser<ShardInfo>(() => new ShardInfo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShardInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.nolog.net.api.writespec.WriteRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardInfo(ShardInfo other) : this() {
          shardToken_ = other.shardToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardInfo Clone() {
          return new ShardInfo(this);
        }

        /// <summary>Field number for the "shard_token" field.</summary>
        public const int ShardTokenFieldNumber = 1;
        private string shardToken_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShardToken {
          get { return shardToken_; }
          set {
            shardToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShardInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShardInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (ShardToken != other.ShardToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (ShardToken.Length != 0) hash ^= ShardToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (ShardToken.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ShardToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (ShardToken.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(ShardToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (ShardToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShardInfo other) {
          if (other == null) {
            return;
          }
          if (other.ShardToken.Length != 0) {
            ShardToken = other.ShardToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                ShardToken = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                ShardToken = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Below is the registration information
      /// CriticalBlocks, Dependencies, CriticalBlockDependencies
      /// and raw information about the state of affairs.
      /// </summary>
      public sealed partial class RawInformation : pb::IMessage<RawInformation>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RawInformation> _parser = new pb::MessageParser<RawInformation>(() => new RawInformation());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RawInformation> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.nolog.net.api.writespec.WriteRequest.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawInformation() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawInformation(RawInformation other) : this() {
          blocks_ = other.blocks_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RawInformation Clone() {
          return new RawInformation(this);
        }

        /// <summary>Field number for the "blocks" field.</summary>
        public const int BlocksFieldNumber = 1;
        private static readonly pb::FieldCodec<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock> _repeated_blocks_codec
            = pb::FieldCodec.ForMessage(10, global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Parser);
        private readonly pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock> blocks_ = new pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock> Blocks {
          get { return blocks_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RawInformation);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RawInformation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!blocks_.Equals(other.blocks_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= blocks_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          blocks_.WriteTo(output, _repeated_blocks_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          blocks_.WriteTo(ref output, _repeated_blocks_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += blocks_.CalculateSize(_repeated_blocks_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RawInformation other) {
          if (other == null) {
            return;
          }
          blocks_.Add(other.blocks_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                blocks_.AddEntriesFrom(ref input, _repeated_blocks_codec);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the RawInformation message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Counts : pb::IMessage<Counts>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Counts> _parser = new pb::MessageParser<Counts>(() => new Counts());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Counts> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Counts() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Counts(Counts other) : this() {
              filled_ = other.filled_;
              success_ = other.success_;
              failed_ = other.failed_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Counts Clone() {
              return new Counts(this);
            }

            /// <summary>Field number for the "filled" field.</summary>
            public const int FilledFieldNumber = 1;
            private bool filled_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Filled {
              get { return filled_; }
              set {
                filled_ = value;
              }
            }

            /// <summary>Field number for the "success" field.</summary>
            public const int SuccessFieldNumber = 2;
            private int success_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Success {
              get { return success_; }
              set {
                success_ = value;
              }
            }

            /// <summary>Field number for the "failed" field.</summary>
            public const int FailedFieldNumber = 3;
            private int failed_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int Failed {
              get { return failed_; }
              set {
                failed_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Counts);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Counts other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Filled != other.Filled) return false;
              if (Success != other.Success) return false;
              if (Failed != other.Failed) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Filled != false) hash ^= Filled.GetHashCode();
              if (Success != 0) hash ^= Success.GetHashCode();
              if (Failed != 0) hash ^= Failed.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Filled != false) {
                output.WriteRawTag(8);
                output.WriteBool(Filled);
              }
              if (Success != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Success);
              }
              if (Failed != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(Failed);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Filled != false) {
                output.WriteRawTag(8);
                output.WriteBool(Filled);
              }
              if (Success != 0) {
                output.WriteRawTag(16);
                output.WriteInt32(Success);
              }
              if (Failed != 0) {
                output.WriteRawTag(24);
                output.WriteInt32(Failed);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Filled != false) {
                size += 1 + 1;
              }
              if (Success != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Success);
              }
              if (Failed != 0) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Failed);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Counts other) {
              if (other == null) {
                return;
              }
              if (other.Filled != false) {
                Filled = other.Filled;
              }
              if (other.Success != 0) {
                Success = other.Success;
              }
              if (other.Failed != 0) {
                Failed = other.Failed;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Filled = input.ReadBool();
                    break;
                  }
                  case 16: {
                    Success = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Failed = input.ReadInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Filled = input.ReadBool();
                    break;
                  }
                  case 16: {
                    Success = input.ReadInt32();
                    break;
                  }
                  case 24: {
                    Failed = input.ReadInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class CriticalBlock : pb::IMessage<CriticalBlock>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<CriticalBlock> _parser = new pb::MessageParser<CriticalBlock>(() => new CriticalBlock());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<CriticalBlock> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CriticalBlock() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CriticalBlock(CriticalBlock other) : this() {
              name_ = other.name_;
              blockDependency_ = other.blockDependency_.Clone();
              state_ = other.state_;
              counts_ = other.counts_ != null ? other.counts_.Clone() : null;
              alerts_ = other.alerts_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public CriticalBlock Clone() {
              return new CriticalBlock(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private string name_ = "";
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "block_dependency" field.</summary>
            public const int BlockDependencyFieldNumber = 2;
            private static readonly pb::FieldCodec<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency> _repeated_blockDependency_codec
                = pb::FieldCodec.ForMessage(18, global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency.Parser);
            private readonly pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency> blockDependency_ = new pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Types.BlockDependency> BlockDependency {
              get { return blockDependency_; }
            }

            /// <summary>Field number for the "state" field.</summary>
            public const int StateFieldNumber = 3;
            private global::io.nolog.net.api.writespec.State state_ = global::io.nolog.net.api.writespec.State.Unknown;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::io.nolog.net.api.writespec.State State {
              get { return state_; }
              set {
                state_ = value;
              }
            }

            /// <summary>Field number for the "counts" field.</summary>
            public const int CountsFieldNumber = 4;
            private global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts counts_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts Counts {
              get { return counts_; }
              set {
                counts_ = value;
              }
            }

            /// <summary>Field number for the "alerts" field.</summary>
            public const int AlertsFieldNumber = 5;
            private static readonly pb::FieldCodec<global::io.nolog.net.api.writespec.AlertInformation> _repeated_alerts_codec
                = pb::FieldCodec.ForMessage(42, global::io.nolog.net.api.writespec.AlertInformation.Parser);
            private readonly pbc::RepeatedField<global::io.nolog.net.api.writespec.AlertInformation> alerts_ = new pbc::RepeatedField<global::io.nolog.net.api.writespec.AlertInformation>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::io.nolog.net.api.writespec.AlertInformation> Alerts {
              get { return alerts_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as CriticalBlock);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(CriticalBlock other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if(!blockDependency_.Equals(other.blockDependency_)) return false;
              if (State != other.State) return false;
              if (!object.Equals(Counts, other.Counts)) return false;
              if(!alerts_.Equals(other.alerts_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (Name.Length != 0) hash ^= Name.GetHashCode();
              hash ^= blockDependency_.GetHashCode();
              if (State != global::io.nolog.net.api.writespec.State.Unknown) hash ^= State.GetHashCode();
              if (counts_ != null) hash ^= Counts.GetHashCode();
              hash ^= alerts_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              blockDependency_.WriteTo(output, _repeated_blockDependency_codec);
              if (State != global::io.nolog.net.api.writespec.State.Unknown) {
                output.WriteRawTag(24);
                output.WriteEnum((int) State);
              }
              if (counts_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(Counts);
              }
              alerts_.WriteTo(output, _repeated_alerts_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (Name.Length != 0) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              blockDependency_.WriteTo(ref output, _repeated_blockDependency_codec);
              if (State != global::io.nolog.net.api.writespec.State.Unknown) {
                output.WriteRawTag(24);
                output.WriteEnum((int) State);
              }
              if (counts_ != null) {
                output.WriteRawTag(34);
                output.WriteMessage(Counts);
              }
              alerts_.WriteTo(ref output, _repeated_alerts_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (Name.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              size += blockDependency_.CalculateSize(_repeated_blockDependency_codec);
              if (State != global::io.nolog.net.api.writespec.State.Unknown) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
              }
              if (counts_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counts);
              }
              size += alerts_.CalculateSize(_repeated_alerts_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(CriticalBlock other) {
              if (other == null) {
                return;
              }
              if (other.Name.Length != 0) {
                Name = other.Name;
              }
              blockDependency_.Add(other.blockDependency_);
              if (other.State != global::io.nolog.net.api.writespec.State.Unknown) {
                State = other.State;
              }
              if (other.counts_ != null) {
                if (counts_ == null) {
                  Counts = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts();
                }
                Counts.MergeFrom(other.Counts);
              }
              alerts_.Add(other.alerts_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    blockDependency_.AddEntriesFrom(input, _repeated_blockDependency_codec);
                    break;
                  }
                  case 24: {
                    State = (global::io.nolog.net.api.writespec.State) input.ReadEnum();
                    break;
                  }
                  case 34: {
                    if (counts_ == null) {
                      Counts = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts();
                    }
                    input.ReadMessage(Counts);
                    break;
                  }
                  case 42: {
                    alerts_.AddEntriesFrom(input, _repeated_alerts_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    blockDependency_.AddEntriesFrom(ref input, _repeated_blockDependency_codec);
                    break;
                  }
                  case 24: {
                    State = (global::io.nolog.net.api.writespec.State) input.ReadEnum();
                    break;
                  }
                  case 34: {
                    if (counts_ == null) {
                      Counts = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts();
                    }
                    input.ReadMessage(Counts);
                    break;
                  }
                  case 42: {
                    alerts_.AddEntriesFrom(ref input, _repeated_alerts_codec);
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the CriticalBlock message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static partial class Types {
              public sealed partial class BlockDependency : pb::IMessage<BlockDependency>
              #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  , pb::IBufferMessage
              #endif
              {
                private static readonly pb::MessageParser<BlockDependency> _parser = new pb::MessageParser<BlockDependency>(() => new BlockDependency());
                private pb::UnknownFieldSet _unknownFields;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<BlockDependency> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor {
                  get { return global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.CriticalBlock.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor {
                  get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BlockDependency() {
                  OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BlockDependency(BlockDependency other) : this() {
                  dependency_ = other.dependency_;
                  action_ = other.action_;
                  state_ = other.state_;
                  counts_ = other.counts_ != null ? other.counts_.Clone() : null;
                  alerts_ = other.alerts_.Clone();
                  _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BlockDependency Clone() {
                  return new BlockDependency(this);
                }

                /// <summary>Field number for the "dependency" field.</summary>
                public const int DependencyFieldNumber = 1;
                private string dependency_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Dependency {
                  get { return dependency_; }
                  set {
                    dependency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "action" field.</summary>
                public const int ActionFieldNumber = 2;
                private string action_ = "";
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string Action {
                  get { return action_; }
                  set {
                    action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                  }
                }

                /// <summary>Field number for the "state" field.</summary>
                public const int StateFieldNumber = 3;
                private global::io.nolog.net.api.writespec.State state_ = global::io.nolog.net.api.writespec.State.Unknown;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::io.nolog.net.api.writespec.State State {
                  get { return state_; }
                  set {
                    state_ = value;
                  }
                }

                /// <summary>Field number for the "counts" field.</summary>
                public const int CountsFieldNumber = 4;
                private global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts counts_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts Counts {
                  get { return counts_; }
                  set {
                    counts_ = value;
                  }
                }

                /// <summary>Field number for the "alerts" field.</summary>
                public const int AlertsFieldNumber = 5;
                private static readonly pb::FieldCodec<global::io.nolog.net.api.writespec.AlertInformation> _repeated_alerts_codec
                    = pb::FieldCodec.ForMessage(42, global::io.nolog.net.api.writespec.AlertInformation.Parser);
                private readonly pbc::RepeatedField<global::io.nolog.net.api.writespec.AlertInformation> alerts_ = new pbc::RepeatedField<global::io.nolog.net.api.writespec.AlertInformation>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::io.nolog.net.api.writespec.AlertInformation> Alerts {
                  get { return alerts_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other) {
                  return Equals(other as BlockDependency);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(BlockDependency other) {
                  if (ReferenceEquals(other, null)) {
                    return false;
                  }
                  if (ReferenceEquals(other, this)) {
                    return true;
                  }
                  if (Dependency != other.Dependency) return false;
                  if (Action != other.Action) return false;
                  if (State != other.State) return false;
                  if (!object.Equals(Counts, other.Counts)) return false;
                  if(!alerts_.Equals(other.alerts_)) return false;
                  return Equals(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode() {
                  int hash = 1;
                  if (Dependency.Length != 0) hash ^= Dependency.GetHashCode();
                  if (Action.Length != 0) hash ^= Action.GetHashCode();
                  if (State != global::io.nolog.net.api.writespec.State.Unknown) hash ^= State.GetHashCode();
                  if (counts_ != null) hash ^= Counts.GetHashCode();
                  hash ^= alerts_.GetHashCode();
                  if (_unknownFields != null) {
                    hash ^= _unknownFields.GetHashCode();
                  }
                  return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString() {
                  return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  output.WriteRawMessage(this);
                #else
                  if (Dependency.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Dependency);
                  }
                  if (Action.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Action);
                  }
                  if (State != global::io.nolog.net.api.writespec.State.Unknown) {
                    output.WriteRawTag(24);
                    output.WriteEnum((int) State);
                  }
                  if (counts_ != null) {
                    output.WriteRawTag(34);
                    output.WriteMessage(Counts);
                  }
                  alerts_.WriteTo(output, _repeated_alerts_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(output);
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
                  if (Dependency.Length != 0) {
                    output.WriteRawTag(10);
                    output.WriteString(Dependency);
                  }
                  if (Action.Length != 0) {
                    output.WriteRawTag(18);
                    output.WriteString(Action);
                  }
                  if (State != global::io.nolog.net.api.writespec.State.Unknown) {
                    output.WriteRawTag(24);
                    output.WriteEnum((int) State);
                  }
                  if (counts_ != null) {
                    output.WriteRawTag(34);
                    output.WriteMessage(Counts);
                  }
                  alerts_.WriteTo(ref output, _repeated_alerts_codec);
                  if (_unknownFields != null) {
                    _unknownFields.WriteTo(ref output);
                  }
                }
                #endif

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize() {
                  int size = 0;
                  if (Dependency.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Dependency);
                  }
                  if (Action.Length != 0) {
                    size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
                  }
                  if (State != global::io.nolog.net.api.writespec.State.Unknown) {
                    size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
                  }
                  if (counts_ != null) {
                    size += 1 + pb::CodedOutputStream.ComputeMessageSize(Counts);
                  }
                  size += alerts_.CalculateSize(_repeated_alerts_codec);
                  if (_unknownFields != null) {
                    size += _unknownFields.CalculateSize();
                  }
                  return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(BlockDependency other) {
                  if (other == null) {
                    return;
                  }
                  if (other.Dependency.Length != 0) {
                    Dependency = other.Dependency;
                  }
                  if (other.Action.Length != 0) {
                    Action = other.Action;
                  }
                  if (other.State != global::io.nolog.net.api.writespec.State.Unknown) {
                    State = other.State;
                  }
                  if (other.counts_ != null) {
                    if (counts_ == null) {
                      Counts = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts();
                    }
                    Counts.MergeFrom(other.Counts);
                  }
                  alerts_.Add(other.alerts_);
                  _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input) {
                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                  input.ReadRawMessage(this);
                #else
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                      case 10: {
                        Dependency = input.ReadString();
                        break;
                      }
                      case 18: {
                        Action = input.ReadString();
                        break;
                      }
                      case 24: {
                        State = (global::io.nolog.net.api.writespec.State) input.ReadEnum();
                        break;
                      }
                      case 34: {
                        if (counts_ == null) {
                          Counts = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts();
                        }
                        input.ReadMessage(Counts);
                        break;
                      }
                      case 42: {
                        alerts_.AddEntriesFrom(input, _repeated_alerts_codec);
                        break;
                      }
                    }
                  }
                #endif
                }

                #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
                  uint tag;
                  while ((tag = input.ReadTag()) != 0) {
                    switch(tag) {
                      default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                        break;
                      case 10: {
                        Dependency = input.ReadString();
                        break;
                      }
                      case 18: {
                        Action = input.ReadString();
                        break;
                      }
                      case 24: {
                        State = (global::io.nolog.net.api.writespec.State) input.ReadEnum();
                        break;
                      }
                      case 34: {
                        if (counts_ == null) {
                          Counts = new global::io.nolog.net.api.writespec.WriteRequest.Types.RawInformation.Types.Counts();
                        }
                        input.ReadMessage(Counts);
                        break;
                      }
                      case 42: {
                        alerts_.AddEntriesFrom(ref input, _repeated_alerts_codec);
                        break;
                      }
                    }
                  }
                }
                #endif

              }

            }
            #endregion

          }

        }
        #endregion

      }

    }
    #endregion

  }

  public sealed partial class WriteThroughBlock : pb::IMessage<WriteThroughBlock>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteThroughBlock> _parser = new pb::MessageParser<WriteThroughBlock>(() => new WriteThroughBlock());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteThroughBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteThroughBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteThroughBlock(WriteThroughBlock other) : this() {
      clientId_ = other.clientId_;
      writeRequests_ = other.writeRequests_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteThroughBlock Clone() {
      return new WriteThroughBlock(this);
    }

    /// <summary>Field number for the "client_id" field.</summary>
    public const int ClientIdFieldNumber = 1;
    private string clientId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientId {
      get { return clientId_; }
      set {
        clientId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "write_requests" field.</summary>
    public const int WriteRequestsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::io.nolog.net.api.writespec.WriteRequest> _repeated_writeRequests_codec
        = pb::FieldCodec.ForMessage(26, global::io.nolog.net.api.writespec.WriteRequest.Parser);
    private readonly pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest> writeRequests_ = new pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::io.nolog.net.api.writespec.WriteRequest> WriteRequests {
      get { return writeRequests_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteThroughBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteThroughBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClientId != other.ClientId) return false;
      if(!writeRequests_.Equals(other.writeRequests_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClientId.Length != 0) hash ^= ClientId.GetHashCode();
      hash ^= writeRequests_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      writeRequests_.WriteTo(output, _repeated_writeRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ClientId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ClientId);
      }
      writeRequests_.WriteTo(ref output, _repeated_writeRequests_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClientId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientId);
      }
      size += writeRequests_.CalculateSize(_repeated_writeRequests_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteThroughBlock other) {
      if (other == null) {
        return;
      }
      if (other.ClientId.Length != 0) {
        ClientId = other.ClientId;
      }
      writeRequests_.Add(other.writeRequests_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 26: {
            writeRequests_.AddEntriesFrom(input, _repeated_writeRequests_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ClientId = input.ReadString();
            break;
          }
          case 26: {
            writeRequests_.AddEntriesFrom(ref input, _repeated_writeRequests_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WriteResponseCode : pb::IMessage<WriteResponseCode>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteResponseCode> _parser = new pb::MessageParser<WriteResponseCode>(() => new WriteResponseCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteResponseCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponseCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponseCode(WriteResponseCode other) : this() {
      statusCode_ = other.statusCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponseCode Clone() {
      return new WriteResponseCode(this);
    }

    /// <summary>Field number for the "status_code" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode statusCode_ = global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode.Success;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteResponseCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteResponseCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode.Success) hash ^= StatusCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatusCode != global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatusCode != global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode.Success) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StatusCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode.Success) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StatusCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteResponseCode other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode.Success) {
        StatusCode = other.StatusCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = (global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatusCode = (global::io.nolog.net.api.writespec.WriteResponseCode.Types.StatusCode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteResponseCode message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum StatusCode {
        [pbr::OriginalName("SUCCESS")] Success = 0,
        [pbr::OriginalName("FAILURE_APIKEY_CANNOT_UNBASE64")] FailureApikeyCannotUnbase64 = 1,
        [pbr::OriginalName("FAILURE_APIKEY_CANNOT_UNMARSHAL")] FailureApikeyCannotUnmarshal = 2,
        [pbr::OriginalName("FAILURE_APIKEY_CANNOT_DECRYPT")] FailureApikeyCannotDecrypt = 3,
        [pbr::OriginalName("FAILURE_APIKEY_EXPIRED")] FailureApikeyExpired = 4,
        [pbr::OriginalName("FAILURE_APIKEY_MISSING_FIELD")] FailureApikeyMissingField = 5,
        [pbr::OriginalName("FAILURE_APIKEY_INVALID")] FailureApikeyInvalid = 6,
      }

    }
    #endregion

  }

  public sealed partial class WriteResponse : pb::IMessage<WriteResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WriteResponse> _parser = new pb::MessageParser<WriteResponse>(() => new WriteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WriteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::io.nolog.net.api.writespec.WriteRequestReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse(WriteResponse other) : this() {
      writeStatus_ = other.writeStatus_ != null ? other.writeStatus_.Clone() : null;
      switch (other.ShardstateCase) {
        case ShardstateOneofCase.Ok:
          Ok = other.Ok;
          break;
        case ShardstateOneofCase.UpdateShard:
          UpdateShard = other.UpdateShard.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WriteResponse Clone() {
      return new WriteResponse(this);
    }

    /// <summary>Field number for the "ok" field.</summary>
    public const int OkFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ok {
      get { return shardstateCase_ == ShardstateOneofCase.Ok ? (bool) shardstate_ : false; }
      set {
        shardstate_ = value;
        shardstateCase_ = ShardstateOneofCase.Ok;
      }
    }

    /// <summary>Field number for the "update_shard" field.</summary>
    public const int UpdateShardFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate UpdateShard {
      get { return shardstateCase_ == ShardstateOneofCase.UpdateShard ? (global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate) shardstate_ : null; }
      set {
        shardstate_ = value;
        shardstateCase_ = value == null ? ShardstateOneofCase.None : ShardstateOneofCase.UpdateShard;
      }
    }

    /// <summary>Field number for the "write_status" field.</summary>
    public const int WriteStatusFieldNumber = 3;
    private global::io.nolog.net.api.writespec.WriteResponseCode writeStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::io.nolog.net.api.writespec.WriteResponseCode WriteStatus {
      get { return writeStatus_; }
      set {
        writeStatus_ = value;
      }
    }

    private object shardstate_;
    /// <summary>Enum of possible cases for the "shardstate" oneof.</summary>
    public enum ShardstateOneofCase {
      None = 0,
      Ok = 1,
      UpdateShard = 2,
    }
    private ShardstateOneofCase shardstateCase_ = ShardstateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShardstateOneofCase ShardstateCase {
      get { return shardstateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShardstate() {
      shardstateCase_ = ShardstateOneofCase.None;
      shardstate_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WriteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WriteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ok != other.Ok) return false;
      if (!object.Equals(UpdateShard, other.UpdateShard)) return false;
      if (!object.Equals(WriteStatus, other.WriteStatus)) return false;
      if (ShardstateCase != other.ShardstateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shardstateCase_ == ShardstateOneofCase.Ok) hash ^= Ok.GetHashCode();
      if (shardstateCase_ == ShardstateOneofCase.UpdateShard) hash ^= UpdateShard.GetHashCode();
      if (writeStatus_ != null) hash ^= WriteStatus.GetHashCode();
      hash ^= (int) shardstateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (shardstateCase_ == ShardstateOneofCase.Ok) {
        output.WriteRawTag(8);
        output.WriteBool(Ok);
      }
      if (shardstateCase_ == ShardstateOneofCase.UpdateShard) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateShard);
      }
      if (writeStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WriteStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (shardstateCase_ == ShardstateOneofCase.Ok) {
        output.WriteRawTag(8);
        output.WriteBool(Ok);
      }
      if (shardstateCase_ == ShardstateOneofCase.UpdateShard) {
        output.WriteRawTag(18);
        output.WriteMessage(UpdateShard);
      }
      if (writeStatus_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WriteStatus);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shardstateCase_ == ShardstateOneofCase.Ok) {
        size += 1 + 1;
      }
      if (shardstateCase_ == ShardstateOneofCase.UpdateShard) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateShard);
      }
      if (writeStatus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WriteStatus);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WriteResponse other) {
      if (other == null) {
        return;
      }
      if (other.writeStatus_ != null) {
        if (writeStatus_ == null) {
          WriteStatus = new global::io.nolog.net.api.writespec.WriteResponseCode();
        }
        WriteStatus.MergeFrom(other.WriteStatus);
      }
      switch (other.ShardstateCase) {
        case ShardstateOneofCase.Ok:
          Ok = other.Ok;
          break;
        case ShardstateOneofCase.UpdateShard:
          if (UpdateShard == null) {
            UpdateShard = new global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate();
          }
          UpdateShard.MergeFrom(other.UpdateShard);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ok = input.ReadBool();
            break;
          }
          case 18: {
            global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate subBuilder = new global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate();
            if (shardstateCase_ == ShardstateOneofCase.UpdateShard) {
              subBuilder.MergeFrom(UpdateShard);
            }
            input.ReadMessage(subBuilder);
            UpdateShard = subBuilder;
            break;
          }
          case 26: {
            if (writeStatus_ == null) {
              WriteStatus = new global::io.nolog.net.api.writespec.WriteResponseCode();
            }
            input.ReadMessage(WriteStatus);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ok = input.ReadBool();
            break;
          }
          case 18: {
            global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate subBuilder = new global::io.nolog.net.api.writespec.WriteResponse.Types.ShardUpdate();
            if (shardstateCase_ == ShardstateOneofCase.UpdateShard) {
              subBuilder.MergeFrom(UpdateShard);
            }
            input.ReadMessage(subBuilder);
            UpdateShard = subBuilder;
            break;
          }
          case 26: {
            if (writeStatus_ == null) {
              WriteStatus = new global::io.nolog.net.api.writespec.WriteResponseCode();
            }
            input.ReadMessage(WriteStatus);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the WriteResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class ShardUpdate : pb::IMessage<ShardUpdate>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ShardUpdate> _parser = new pb::MessageParser<ShardUpdate>(() => new ShardUpdate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ShardUpdate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::io.nolog.net.api.writespec.WriteResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardUpdate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardUpdate(ShardUpdate other) : this() {
          shard_ = other.shard_;
          shardToken_ = other.shardToken_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ShardUpdate Clone() {
          return new ShardUpdate(this);
        }

        /// <summary>Field number for the "shard" field.</summary>
        public const int ShardFieldNumber = 1;
        private string shard_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Shard {
          get { return shard_; }
          set {
            shard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "shard_token" field.</summary>
        public const int ShardTokenFieldNumber = 2;
        private string shardToken_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ShardToken {
          get { return shardToken_; }
          set {
            shardToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ShardUpdate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ShardUpdate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Shard != other.Shard) return false;
          if (ShardToken != other.ShardToken) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Shard.Length != 0) hash ^= Shard.GetHashCode();
          if (ShardToken.Length != 0) hash ^= ShardToken.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Shard.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Shard);
          }
          if (ShardToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ShardToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Shard.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Shard);
          }
          if (ShardToken.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ShardToken);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Shard.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Shard);
          }
          if (ShardToken.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ShardToken);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ShardUpdate other) {
          if (other == null) {
            return;
          }
          if (other.Shard.Length != 0) {
            Shard = other.Shard;
          }
          if (other.ShardToken.Length != 0) {
            ShardToken = other.ShardToken;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Shard = input.ReadString();
                break;
              }
              case 18: {
                ShardToken = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Shard = input.ReadString();
                break;
              }
              case 18: {
                ShardToken = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
